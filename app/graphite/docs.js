export default {"parameter_docs":{"areaAlpha":"\n<span id=\"param-areaalpha\"></span><h3>areaAlpha</h3>\n<p><em>Default: 1.0</em></p>\n<p>Takes a floating point number between 0.0 and 1.0\nSets the alpha (transparency) value of filled areas when using an <a class=\"reference internal\" href=\"#areamode\">areaMode</a></p>\n","areaMode":"\n<span id=\"param-areamode\"></span><h3>areaMode</h3>\n<p><em>Default: none</em></p>\n<p>Enables filling of the area below the graphed lines. Fill area is the same color as\nthe line color associated with it. See <a class=\"reference internal\" href=\"#areaalpha\">areaAlpha</a> to make this area transparent.\nTakes one of the following parameters which determines the fill mode to use:</p>\n<dl class=\"docutils\">\n<dt><tt class=\"docutils literal\"><span class=\"pre\">none</span></tt></dt>\n<dd>Disables areaMode</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">first</span></tt></dt>\n<dd>Fills the area under the first target and no other</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">all</span></tt></dt>\n<dd>Fills the areas under each target</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">stacked</span></tt></dt>\n<dd>Creates a graph where the filled area of each target is stacked on one another.\nEach target line is displayed as the sum of all previous lines plus the value of the current line.</dd>\n</dl>\n","bgcolor":"\n<span id=\"param-bgcolor\"></span><h3>bgcolor</h3>\n<p><em>Default: value from the [default] template in graphTemplates.conf</em></p>\n<p>Sets the background color of the graph.</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"48%\" />\n<col width=\"52%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Color Names</th>\n<th class=\"head\">RGB Value</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td>black</td>\n<td>0,0,0</td>\n</tr>\n<tr class=\"row-odd\"><td>white</td>\n<td>255,255,255</td>\n</tr>\n<tr class=\"row-even\"><td>blue</td>\n<td>100,100,255</td>\n</tr>\n<tr class=\"row-odd\"><td>green</td>\n<td>0,200,0</td>\n</tr>\n<tr class=\"row-even\"><td>red</td>\n<td>200,0,50</td>\n</tr>\n<tr class=\"row-odd\"><td>yellow</td>\n<td>255,255,0</td>\n</tr>\n<tr class=\"row-even\"><td>orange</td>\n<td>255, 165, 0</td>\n</tr>\n<tr class=\"row-odd\"><td>purple</td>\n<td>200,100,255</td>\n</tr>\n<tr class=\"row-even\"><td>brown</td>\n<td>150,100,50</td>\n</tr>\n<tr class=\"row-odd\"><td>aqua</td>\n<td>0,150,150</td>\n</tr>\n<tr class=\"row-even\"><td>gray</td>\n<td>175,175,175</td>\n</tr>\n<tr class=\"row-odd\"><td>grey</td>\n<td>175,175,175</td>\n</tr>\n<tr class=\"row-even\"><td>magenta</td>\n<td>255,0,255</td>\n</tr>\n<tr class=\"row-odd\"><td>pink</td>\n<td>255,100,100</td>\n</tr>\n<tr class=\"row-even\"><td>gold</td>\n<td>200,200,0</td>\n</tr>\n<tr class=\"row-odd\"><td>rose</td>\n<td>200,150,200</td>\n</tr>\n<tr class=\"row-even\"><td>darkblue</td>\n<td>0,0,255</td>\n</tr>\n<tr class=\"row-odd\"><td>darkgreen</td>\n<td>0,255,0</td>\n</tr>\n<tr class=\"row-even\"><td>darkred</td>\n<td>255,0,0</td>\n</tr>\n<tr class=\"row-odd\"><td>darkgray</td>\n<td>111,111,111</td>\n</tr>\n<tr class=\"row-even\"><td>darkgrey</td>\n<td>111,111,111</td>\n</tr>\n</tbody>\n</table>\n<p>RGB can be passed directly in the format #RRGGBB where RR, GG, and BB are 2-digit hex vaules for red, green and blue, respectively.</p>\n<p>Examples:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;bgcolor=blue\n&amp;bgcolor=#2222FF\n</pre></div>\n</div>\n","cacheTimeout":"\n<h3>cacheTimeout</h3>\n<p><em>Default: The value of DEFAULT_CACHE_DURATION from local_settings.py</em></p>\n<p>The time in seconds for the rendered graph to be cached (only relevant if memcached is configured)</p>\n","colorList":"\n<span id=\"param-colorlist\"></span><h3>colorList</h3>\n<p><em>Default: value from the [default] template in graphTemplates.conf</em></p>\n<p>Takes one or more comma-separated color names or RGB values (see bgcolor for a list of color names) and uses that list in order as the colors of the lines.  If more lines / metrics are drawn than colors passed, the list is reused in order.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;colorList=green,yellow,orange,red,purple,#DECAFF\n</pre></div>\n</div>\n","drawNullAsZero":"\n<span id=\"param-drawnullaszero\"></span><h3>drawNullAsZero</h3>\n<p><em>Default: false</em></p>\n<p>Converts any None (null) values in the displayed metrics to zero at render time.</p>\n","fgcolor":"\n<span id=\"param-fgcolor\"></span><h3>fgcolor</h3>\n<p><em>Default: value from the [default] template in graphTemplates.conf</em></p>\n<p>Sets the foreground color.\nThis only affects the title, legend text, and axis labels.</p>\n<p>See <a class=\"reference internal\" href=\"#majorgridlinecolor\">majorGridLineColor</a>, and <a class=\"reference internal\" href=\"#minorgridlinecolor\">minorGridLineColor</a> for further control of colors.</p>\n<p>See <a class=\"reference internal\" href=\"#bgcolor\">bgcolor</a> for a list of color names and details on formatting this parameter.</p>\n","fontBold":"\n<span id=\"param-fontbold\"></span><h3>fontBold</h3>\n<p><em>Default: value from the [default] template in graphTemplates.conf</em></p>\n<p>If set to true, makes the font bold.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;fontBold=true\n</pre></div>\n</div>\n","fontItalic":"\n<span id=\"param-fontitalic\"></span><h3>fontItalic</h3>\n<p><em>Default: value from the [default] template in graphTemplates.conf</em></p>\n<p>If set to true, makes the font italic / oblique.\nDefault is false.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;fontItalic=true\n</pre></div>\n</div>\n","fontName":"\n<span id=\"param-fontname\"></span><h3>fontName</h3>\n<p><em>Default: value from the [default] template in graphTemplates.conf</em></p>\n<p>Change the font used to render text on the graph.\nThe font must be installed on the Graphite Server.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;fontName=FreeMono\n</pre></div>\n</div>\n","fontSize":"\n<span id=\"param-fontsize\"></span><h3>fontSize</h3>\n<p><em>Default: value from the [default] template in graphTemplates.conf</em></p>\n<p>Changes the font size.\nMust be passed a positive floating point number or integer equal to or greater than 1.\nDefault is 10</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;fontSize=8\n</pre></div>\n</div>\n","format":"\n<h3>format</h3>\n<p>See: <a class=\"reference internal\" href=\"#data-display-formats\">Data Display Formats</a></p>\n","from":"\n<h3>from</h3>\n<p>See: <a class=\"reference internal\" href=\"#from-until\">from / until</a></p>\n","graphOnly":"\n<span id=\"param-graphonly\"></span><h3>graphOnly</h3>\n<p><em>Default: False</em></p>\n<p>Display only the graph area with no grid lines, axes, or legend</p>\n","graphType":"\n<h3>graphType</h3>\n<p><em>Default: line</em></p>\n<p>Sets the type of graph to be rendered. Currently there are only two graph types:</p>\n<dl class=\"docutils\">\n<dt><tt class=\"docutils literal\"><span class=\"pre\">line</span></tt></dt>\n<dd>A line graph displaying metrics as lines over time</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">pie</span></tt></dt>\n<dd>A pie graph with each slice displaying an aggregate of each metric calculated using the function\nspecified by <a class=\"reference internal\" href=\"#piemode\">pieMode</a></dd>\n</dl>\n","hideLegend":"\n<span id=\"param-hidelegend\"></span><h3>hideLegend</h3>\n<p><em>Default: &lt;unset&gt;</em></p>\n<p>If set to <tt class=\"docutils literal\"><span class=\"pre\">true</span></tt>, the legend is not drawn.\nIf set to <tt class=\"docutils literal\"><span class=\"pre\">false</span></tt>, the legend is drawn.\nIf unset, the <tt class=\"docutils literal\"><span class=\"pre\">LEGEND_MAX_ITEMS</span></tt> settings in <tt class=\"docutils literal\"><span class=\"pre\">local_settings.py</span></tt> is used to determine\nwhether or not to display the legend.</p>\n<p>Hint: If set to <tt class=\"docutils literal\"><span class=\"pre\">false</span></tt> the <tt class=\"docutils literal\"><span class=\"pre\">&amp;height</span></tt> parameter may need to be increased to accommodate the additional text.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;hideLegend=false\n</pre></div>\n</div>\n","hideAxes":"\n<span id=\"param-hideaxes\"></span><h3>hideAxes</h3>\n<p><em>Default: False</em></p>\n<p>If set to <tt class=\"docutils literal\"><span class=\"pre\">true</span></tt> the X and Y axes will not be rendered\nExample:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;hideAxes=true\n</pre></div>\n</div>\n","hideYAxis":"\n<span id=\"param-hideyaxis\"></span><h3>hideYAxis</h3>\n<p><em>Default: False</em></p>\n<p>If set to <tt class=\"docutils literal\"><span class=\"pre\">true</span></tt> the Y Axis will not be rendered</p>\n","hideGrid":"\n<span id=\"param-hidegrid\"></span><h3>hideGrid</h3>\n<p><em>Default: False</em></p>\n<p>If set to <tt class=\"docutils literal\"><span class=\"pre\">true</span></tt> the grid lines will not be rendered</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;hideGrid=true\n</pre></div>\n</div>\n","height":"\n<h3>height</h3>\n<p><em>Default: 250</em></p>\n<p>Sets the height of the generated graph image in pixels.</p>\n<p>See also: <a class=\"reference internal\" href=\"#width\">width</a></p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;width=650&amp;height=250\n</pre></div>\n</div>\n","jsonp":"\n<h3>jsonp</h3>\n<p><em>Default: &lt;unset&gt;</em></p>\n<p>If set and combined with <tt class=\"docutils literal\"><span class=\"pre\">format=json</span></tt>, wraps the JSON response in a function call\nnamed by the parameter specified.</p>\n","leftColor":"\n<h3>leftColor</h3>\n<p><em>Default: color chosen from</em> <a class=\"reference internal\" href=\"#colorlist\">colorList</a></p>\n<p>In dual Y-axis mode, sets the color of all metrics associated with the left Y-axis.</p>\n","leftDashed":"\n<h3>leftDashed</h3>\n<p><em>Default: False</em></p>\n<p>In dual Y-axis mode, draws all metrics associated with the left Y-axis using dashed lines</p>\n","leftWidth":"\n<h3>leftWidth</h3>\n<p><em>Default: value of the parameter</em> <a class=\"reference internal\" href=\"#linewidth\">lineWidth</a></p>\n<p>In dual Y-axis mode, sets the line width of all metrics associated with the left Y-axis</p>\n","lineMode":"\n<span id=\"param-linemode\"></span><h3>lineMode</h3>\n<p><em>Default: slope</em></p>\n<p>Sets the line drawing behavior. Takes one of the following parameters:</p>\n<dl class=\"docutils\">\n<dt><tt class=\"docutils literal\"><span class=\"pre\">slope</span></tt></dt>\n<dd>Slope line mode draws a line from each point to the next. Periods will Null values will not be drawn</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">staircase</span></tt></dt>\n<dd>Staircase draws a flat line for the duration of a time period and then a vertical line up or down to the next value</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">connected</span></tt></dt>\n<dd>Like a slope line, but values are always connected with a slope line, regardless of whether or not there are Null values between them</dd>\n</dl>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;lineMode=staircase\n</pre></div>\n</div>\n","lineWidth":"\n<span id=\"param-linewidth\"></span><h3>lineWidth</h3>\n<p><em>Default: 1.2</em></p>\n<p>Takes any floating point or integer (negative numbers do not error but will cause no line to be drawn).\nChanges the width of the line in pixels.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;lineWidth=2\n</pre></div>\n</div>\n","logBase":"\n<span id=\"param-logbase\"></span><h3>logBase</h3>\n<p><em>Default: &lt;unset&gt;</em></p>\n<p>If set, draws the graph with a logarithmic scale of the specified base (e.g. 10 for common logarithm)</p>\n","localOnly":"\n<h3>localOnly</h3>\n<p><em>Default: False</em></p>\n<p>Set to prevent fetching from remote Graphite servers, only returning metrics which are accessible locally</p>\n","majorGridLineColor":"\n<span id=\"param-majorgridlinecolor\"></span><h3>majorGridLineColor</h3>\n<p><em>Default: value from the [default] template in graphTemplates.conf</em></p>\n<p>Sets the color of the major grid lines.</p>\n<p>See bgcolor for valid color names and formats.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;majorGridLineColor=#FF22FF\n</pre></div>\n</div>\n","margin":"\n<h3>margin</h3>\n<p><em>Default: 10</em>\nSets the margin around a graph image in pixels on all sides.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;margin=20\n</pre></div>\n</div>\n","max":"\n<h3>max</h3>\n<div class=\"deprecated\">\n<p><span>Deprecated since version 0.9.0: </span>See <a class=\"reference internal\" href=\"#ymax\">yMax</a></p>\n</div>\n","maxDataPoints":"\n<h3>maxDataPoints</h3>\n<p>Set the maximum numbers of datapoints returned when using json content.</p>\n<p>If the number of datapoints in a selected range exceeds the maxDataPoints value then the datapoints over the whole period are consolidated.</p>\n","minorGridLineColor":"\n<span id=\"param-minorgridlinecolor\"></span><h3>minorGridLineColor</h3>\n<p><em>Default: value from the [default] template in graphTemplates.conf</em></p>\n<p>Sets the color of the minor grid lines.</p>\n<p>See <a class=\"reference internal\" href=\"#bgcolor\">bgcolor</a> for valid color names and formats.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;minorGridLineColor=darkgrey\n</pre></div>\n</div>\n","minorY":"\n<span id=\"param-minory\"></span><h3>minorY</h3>\n<p>Sets the number of minor grid lines per major line on the y-axis.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;minorY=3\n</pre></div>\n</div>\n","min":"\n<h3>min</h3>\n<div class=\"deprecated\">\n<p><span>Deprecated since version 0.9.0: </span>See <a class=\"reference internal\" href=\"#ymin\">yMin</a></p>\n</div>\n","minXStep":"\n<span id=\"param-minxstep\"></span><h3>minXStep</h3>\n<p><em>Default: 1</em></p>\n<p>Sets the minimum pixel-step to use between datapoints drawn. Any value below this will trigger a\npoint consolidation of the series at render time. The default value of <tt class=\"docutils literal\"><span class=\"pre\">1</span></tt> combined with the default\nlineWidth of <tt class=\"docutils literal\"><span class=\"pre\">1.2</span></tt> will cause a minimal amount of line overlap between close-together points. To\ndisable render-time point consolidation entirely, set this to <tt class=\"docutils literal\"><span class=\"pre\">0</span></tt> though note that series with more points\nthan there are pixels in the graph area (e.g. a few month’s worth of per-minute data) will look very\n‘smooshed’ as there will be a good deal of line overlap. In response, one may use <a class=\"reference internal\" href=\"#linewidth\">lineWidth</a> to compensate\nfor this.</p>\n","noCache":"\n<h3>noCache</h3>\n<p><em>Default: False</em></p>\n<p>Set to disable caching of rendered images</p>\n","pickle":"\n<h3>pickle</h3>\n<div class=\"deprecated\">\n<p><span>Deprecated since version 0.9.10: </span>See <a class=\"reference internal\" href=\"#data-display-formats\">Data Display Formats</a></p>\n</div>\n","pieMode":"\n<h3>pieMode</h3>\n<p><em>Default: average</em></p>\n<p>The type of aggregation to use to calculate slices of a pie when <tt class=\"docutils literal\"><span class=\"pre\">graphType=pie</span></tt>.\nOne of:</p>\n<dl class=\"docutils\">\n<dt><tt class=\"docutils literal\"><span class=\"pre\">average</span></tt></dt>\n<dd>The average of non-null points in the series</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">maximum</span></tt></dt>\n<dd>The maximum of non-null points in the series</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">minimum</span></tt></dt>\n<dd>THe minimum of non-null points in the series</dd>\n</dl>\n","rightColor":"\n<h3>rightColor</h3>\n<p><em>Default: color chosen from</em> <a class=\"reference internal\" href=\"#colorlist\">colorList</a></p>\n<p>In dual Y-axis mode, sets the color of all metrics associated with the right Y-axis.</p>\n","rightDashed":"\n<h3>rightDashed</h3>\n<p><em>Default: False</em></p>\n<p>In dual Y-axis mode, draws all metrics associated with the right Y-axis using dashed lines</p>\n","rightWidth":"\n<h3>rightWidth</h3>\n<p><em>Default: value of the parameter</em> <a class=\"reference internal\" href=\"#linewidth\">lineWidth</a></p>\n<p>In dual Y-axis mode, sets the line width of all metrics associated with the right Y-axis</p>\n","template":"\n<span id=\"param-template\"></span><h3>template</h3>\n<p><em>Default: default</em></p>\n<p>Used to specify a template from <tt class=\"docutils literal\"><span class=\"pre\">graphTemplates.conf</span></tt> to use for default\ncolors and graph styles.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;template=plain\n</pre></div>\n</div>\n","thickness":"\n<h3>thickness</h3>\n<div class=\"deprecated\">\n<p><span>Deprecated since version 0.9.0: </span>See: <a class=\"reference internal\" href=\"#linewidth\">lineWidth</a></p>\n</div>\n","title":"\n<span id=\"param-title\"></span><h3>title</h3>\n<p><em>Default: &lt;unset&gt;</em></p>\n<p>Puts a title at the top of the graph, center aligned.\nIf unset, no title is displayed.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;title=Apache Busy Threads, All Servers, Past 24h\n</pre></div>\n</div>\n","tz":"\n<span id=\"param-tz\"></span><h3>tz</h3>\n<p><em>Default: The timezone specified in local_settings.py</em></p>\n<p>Time zone to convert all times into.</p>\n<p>Examples:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;tz=America/Los_Angeles\n&amp;tz=UTC\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">To change the default timezone, edit <tt class=\"docutils literal\"><span class=\"pre\">webapp/graphite/local_settings.py</span></tt>.</p>\n</div>\n","uniqueLegend":"\n<span id=\"param-uniquelegend\"></span><h3>uniqueLegend</h3>\n<p><em>Default: False</em></p>\n<p>Display only unique legend items, removing any duplicates</p>\n","until":"\n<h3>until</h3>\n<p>See: <a class=\"reference internal\" href=\"#from-until\">from / until</a></p>\n","vtitle":"\n<span id=\"param-vtitle\"></span><h3>vtitle</h3>\n<p><em>Default: &lt;unset&gt;</em></p>\n<p>Labels the y-axis with vertical text.\nIf unset, no y-axis label is displayed.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;vtitle=Threads\n</pre></div>\n</div>\n","vtitleRight":"\n<h3>vtitleRight</h3>\n<p><em>Default: &lt;unset&gt;</em></p>\n<p>In dual Y-axis mode, sets the title of the right Y-Axis (See: <a class=\"reference internal\" href=\"#vtitle\">vtitle</a>)</p>\n","width":"\n<h3>width</h3>\n<p><em>Default: 330</em></p>\n<p>Sets the width of the generated graph image in pixels.</p>\n<p>See also: <a class=\"reference internal\" href=\"#height\">height</a></p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;width=650&amp;height=250\n</pre></div>\n</div>\n","xFormat":"\n<span id=\"param-xformat\"></span><h3>xFormat</h3>\n<p><em>Default: Determined automatically based on the time-width of the X axis</em></p>\n<p>Sets the time format used when displaying the X-axis. See\n<a class=\"reference external\" href=\"http://docs.python.org/library/datetime.html#datetime.date.strftime\">datetime.date.strftime()</a>\nfor format specification details.</p>\n","yAxisSide":"\n<span id=\"param-yaxisside\"></span><h3>yAxisSide</h3>\n<p><em>Default: left</em></p>\n<p>Sets the side of the graph on which to render the Y-axis. Accepts values of <tt class=\"docutils literal\"><span class=\"pre\">left</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">right</span></tt></p>\n","yDivisor":"\n<span id=\"param-ydivisor\"></span><h3>yDivisor</h3>\n<p><em>Default: 4,5,6</em></p>\n<p>Supplies the preferred number of intermediate values for the Y-axis to display (Y values between\nthe min and max). Note that Graphite will ultimately choose what values (and how many) to display\nbased on a set of ‘pretty’ values. To explicitly set the Y-axis values, see <a class=\"reference internal\" href=\"#ystep\">yStep</a></p>\n","yLimit":"\n<h3>yLimit</h3>\n<p><em>Reserved for future use</em>\nSee: <a class=\"reference internal\" href=\"#ymax\">yMax</a></p>\n","yLimitLeft":"\n<h3>yLimitLeft</h3>\n<p><em>Reserved for future use</em>\nSee: <a class=\"reference internal\" href=\"#ymaxleft\">yMaxLeft</a></p>\n","yLimitRight":"\n<h3>yLimitRight</h3>\n<p><em>Reserved for future use</em>\nSee: <a class=\"reference internal\" href=\"#ymaxright\">yMaxRight</a></p>\n","yMin":"\n<span id=\"param-ymin\"></span><h3>yMin</h3>\n<p><em>Default: The lowest value of any of the series displayed</em></p>\n<p>Manually sets the lower bound of the graph. Can be passed any integer or floating point number.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;yMin=0\n</pre></div>\n</div>\n","yMax":"\n<span id=\"param-ymax\"></span><h3>yMax</h3>\n<p><em>Default: The highest value of any of the series displayed</em></p>\n<p>Manually sets the upper bound of the graph. Can be passed any integer or floating point number.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;yMax=0.2345\n</pre></div>\n</div>\n","yMaxLeft":"\n<h3>yMaxLeft</h3>\n<p>In dual Y-axis mode, sets the upper bound of the left Y-Axis (See: <a class=\"reference internal\" href=\"#ymax\">yMax</a>)</p>\n","yMaxRight":"\n<h3>yMaxRight</h3>\n<p>In dual Y-axis mode, sets the upper bound of the right Y-Axis (See: <a class=\"reference internal\" href=\"#ymax\">yMax</a>)</p>\n","yMinLeft":"\n<h3>yMinLeft</h3>\n<p>In dual Y-axis mode, sets the lower bound of the left Y-Axis (See: <a class=\"reference internal\" href=\"#ymin\">yMin</a>)</p>\n","yMinRight":"\n<h3>yMinRight</h3>\n<p>In dual Y-axis mode, sets the lower bound of the right Y-Axis (See: <a class=\"reference internal\" href=\"#ymin\">yMin</a>)</p>\n","yStep":"\n<span id=\"param-ystep\"></span><h3>yStep</h3>\n<p><em>Default: Calculated automatically</em></p>\n<p>Manually set the value step between Y-axis labels and grid lines</p>\n","yStepLeft":"\n<h3>yStepLeft</h3>\n<p>In dual Y-axis mode, Manually set the value step between the left Y-axis labels and grid lines (See: <a class=\"reference internal\" href=\"#ystep\">yStep</a>)</p>\n","yStepRight":"\n<h3>yStepRight</h3>\n<p>In dual Y-axis mode, Manually set the value step between the right Y-axis labels and grid lines (See: <a class=\"reference internal\" href=\"#ystep\">yStep</a>)</p>\n","yUnitSystem":"\n<span id=\"param-yunitsystem\"></span><h3>yUnitSystem</h3>\n<p><em>Default: si</em></p>\n<p>Set the unit system for compacting Y-axis values (e.g. 23,000,000 becomes 23M).\nValue can be one of:</p>\n<dl class=\"docutils\">\n<dt><tt class=\"docutils literal\"><span class=\"pre\">si</span></tt></dt>\n<dd>Use si units (powers of 1000) - K, M, G, T, P</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">binary</span></tt></dt>\n<dd>Use binary units (powers of 1024) - Ki, Mi, Gi, Ti, Pi</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">none</span></tt></dt>\n<dd>Dont compact values, display the raw number</dd>\n</dl>\n"},"parameter_doc_ids":{"areaalpha":"areaAlpha","areamode":"areaMode","bgcolor":"bgcolor","cachetimeout":"cacheTimeout","colorlist":"colorList","drawnullaszero":"drawNullAsZero","fgcolor":"fgcolor","fontbold":"fontBold","fontitalic":"fontItalic","fontname":"fontName","fontsize":"fontSize","id5":"format","from":"from","graphonly":"graphOnly","graphtype":"graphType","hidelegend":"hideLegend","hideaxes":"hideAxes","hideyaxis":"hideYAxis","hidegrid":"hideGrid","height":"height","jsonp":"jsonp","leftcolor":"leftColor","leftdashed":"leftDashed","leftwidth":"leftWidth","linemode":"lineMode","linewidth":"lineWidth","logbase":"logBase","localonly":"localOnly","majorgridlinecolor":"majorGridLineColor","margin":"margin","max":"max","maxdatapoints":"maxDataPoints","minorgridlinecolor":"minorGridLineColor","minory":"minorY","min":"min","minxstep":"minXStep","nocache":"noCache","id6":"pickle","piemode":"pieMode","rightcolor":"rightColor","rightdashed":"rightDashed","rightwidth":"rightWidth","template":"template","thickness":"thickness","title":"title","tz":"tz","uniquelegend":"uniqueLegend","until":"until","vtitle":"vtitle","vtitleright":"vtitleRight","width":"width","xformat":"xFormat","yaxisside":"yAxisSide","ydivisor":"yDivisor","ylimit":"yLimit","ylimitleft":"yLimitLeft","ylimitright":"yLimitRight","ymin":"yMin","ymax":"yMax","ymaxleft":"yMaxLeft","ymaxright":"yMaxRight","yminleft":"yMinLeft","yminright":"yMinRight","ystep":"yStep","ystepleft":"yStepLeft","ystepright":"yStepRight","yunitsystem":"yUnitSystem"},"function_docs":{"absolute":{"signature":"absolute(seriesList)","examples":["absolute(Server.instance01.threads.busy)","absolute(Server.instance*.threads.busy)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.absolute\">\n<tt class=\"descname\">absolute</tt><big>(</big><em>seriesList</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList and applies the mathematical abs function to each\ndatapoint transforming it to its absolute value.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=absolute(Server.instance01.threads.busy)\n&amp;target=absolute(Server.instance*.threads.busy)\n</pre></div>\n</div>\n</dd></dl>"},"alias":{"signature":"alias(seriesList, newName)","examples":["alias(Sales.widgets.largeBlue,\"Large Blue Widgets\")"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.alias\">\n<tt class=\"descname\">alias</tt><big>(</big><em>seriesList</em>, <em>newName</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList and a string in quotes.\nPrints the string instead of the metric name in the legend.</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=alias(Sales.widgets.largeBlue,\"Large Blue Widgets\")\n</pre></div>\n</div>\n</dd></dl>"},"aliasByMetric":{"signature":"aliasByMetric(seriesList)","examples":["aliasByMetric(carbon.agents.graphite.creates)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.aliasByMetric\">\n<tt class=\"descname\">aliasByMetric</tt><big>(</big><em>seriesList</em><big>)</big></dt>\n<dd><p>Takes a seriesList and applies an alias derived from the base metric name.</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=aliasByMetric(carbon.agents.graphite.creates)\n</pre></div>\n</div>\n</dd></dl>"},"aliasByNode":{"signature":"aliasByNode(seriesList, *nodes)","examples":["aliasByNode(ganglia.*.cpu.load5,1)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.aliasByNode\">\n<tt class=\"descname\">aliasByNode</tt><big>(</big><em>seriesList</em>, <em>*nodes</em><big>)</big></dt>\n<dd><p>Takes a seriesList and applies an alias derived from one or more “node”\nportion/s of the target name. Node indices are 0 indexed.</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=aliasByNode(ganglia.*.cpu.load5,1)\n</pre></div>\n</div>\n</dd></dl>"},"aliasSub":{"signature":"aliasSub(seriesList, search, replace)","examples":["aliasSub(ip.*TCP*,\"^.*TCP(\\d+)\",\"\\1\")"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.aliasSub\">\n<tt class=\"descname\">aliasSub</tt><big>(</big><em>seriesList</em>, <em>search</em>, <em>replace</em><big>)</big></dt>\n<dd><p>Runs series names through a regex search/replace.</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=aliasSub(ip.*TCP*,\"^.*TCP(\\d+)\",\"\\1\")\n</pre></div>\n</div>\n</dd></dl>"},"alpha":{"signature":"alpha(seriesList, alpha)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.alpha\">\n<tt class=\"descname\">alpha</tt><big>(</big><em>seriesList</em>, <em>alpha</em><big>)</big></dt>\n<dd><p>Assigns the given alpha transparency setting to the series. Takes a float value between 0 and 1.</p>\n</dd></dl>"},"areaBetween":{"signature":"areaBetween(seriesList)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.areaBetween\">\n<tt class=\"descname\">areaBetween</tt><big>(</big><em>seriesList</em><big>)</big></dt>\n<dd><p>Draws the area in between the two series in seriesList</p>\n</dd></dl>"},"asPercent":{"signature":"asPercent(seriesList, total=None)","examples":["asPercent(Server01.connections.{failed,succeeded}, Server01.connections.attempted)","asPercent(apache01.threads.busy,1500)","asPercent(Server01.cpu.*.jiffies)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.asPercent\">\n<tt class=\"descname\">asPercent</tt><big>(</big><em>seriesList</em>, <em>total=None</em><big>)</big></dt>\n<dd><p>Calculates a percentage of the total of a wildcard series. If <cite>total</cite> is specified,\neach series will be calculated as a percentage of that total. If <cite>total</cite> is not specified,\nthe sum of all points in the wildcard series will be used instead.</p>\n<p>The <cite>total</cite> parameter may be a single series or a numeric value.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=asPercent(Server01.connections.{failed,succeeded}, Server01.connections.attempted)\n&amp;target=asPercent(apache01.threads.busy,1500)\n&amp;target=asPercent(Server01.cpu.*.jiffies)\n</pre></div>\n</div>\n</dd></dl>"},"averageAbove":{"signature":"averageAbove(seriesList, n)","examples":["averageAbove(server*.instance*.threads.busy,25)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.averageAbove\">\n<tt class=\"descname\">averageAbove</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by an integer N.\nOut of all metrics passed, draws only the metrics with an average value\nabove N for the time period specified.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=averageAbove(server*.instance*.threads.busy,25)\n</pre></div>\n</div>\n<p>Draws the servers with average values above 25.</p>\n</dd></dl>"},"averageBelow":{"signature":"averageBelow(seriesList, n)","examples":["averageBelow(server*.instance*.threads.busy,25)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.averageBelow\">\n<tt class=\"descname\">averageBelow</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by an integer N.\nOut of all metrics passed, draws only the metrics with an average value\nbelow N for the time period specified.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=averageBelow(server*.instance*.threads.busy,25)\n</pre></div>\n</div>\n<p>Draws the servers with average values below 25.</p>\n</dd></dl>"},"averageSeries":{"signature":"averageSeries(*seriesLists)","examples":["averageSeries(company.server.*.threads.busy)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.averageSeries\">\n<tt class=\"descname\">averageSeries</tt><big>(</big><em>*seriesLists</em><big>)</big></dt>\n<dd><p>Short Alias: avg()</p>\n<p>Takes one metric or a wildcard seriesList.\nDraws the average value of all metrics passed at each time.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=averageSeries(company.server.*.threads.busy)\n</pre></div>\n</div>\n</dd></dl>"},"averageSeriesWithWildcards":{"signature":"averageSeriesWithWildcards(seriesList, *position)","examples":["averageSeriesWithWildcards(host.cpu-[0-7].cpu-{user,system}.value, 1)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.averageSeriesWithWildcards\">\n<tt class=\"descname\">averageSeriesWithWildcards</tt><big>(</big><em>seriesList</em>, <em>*position</em><big>)</big></dt>\n<dd><p>Call averageSeries after inserting wildcards at the given position(s).</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=averageSeriesWithWildcards(host.cpu-[0-7].cpu-{user,system}.value, 1)\n</pre></div>\n</div>\n<p>This would be the equivalent of\n<tt class=\"docutils literal\"><span class=\"pre\">target=averageSeries(host.*.cpu-user.value)&amp;target=averageSeries(host.*.cpu-system.value)</span></tt></p>\n</dd></dl>"},"cactiStyle":{"signature":"cactiStyle(seriesList, system=None)","examples":["cactiStyle(ganglia.*.net.bytes_out,\"si\")"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.cactiStyle\">\n<tt class=\"descname\">cactiStyle</tt><big>(</big><em>seriesList</em>, <em>system=None</em><big>)</big></dt>\n<dd><p>Takes a series list and modifies the aliases to provide column aligned\noutput with Current, Max, and Min values in the style of cacti. Optonally\ntakes a “system” value to apply unit formatting in the same style as the\nY-axis.\nNOTE: column alignment only works with monospace fonts such as terminus.</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=cactiStyle(ganglia.*.net.bytes_out,\"si\")\n</pre></div>\n</div>\n</dd></dl>"},"color":{"signature":"color(seriesList, theColor)","examples":["color(collectd.hostname.cpu.0.user, 'green')","color(collectd.hostname.cpu.0.system, 'ff0000')","color(collectd.hostname.cpu.0.idle, 'gray')","color(collectd.hostname.cpu.0.idle, '6464ffaa')"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.color\">\n<tt class=\"descname\">color</tt><big>(</big><em>seriesList</em>, <em>theColor</em><big>)</big></dt>\n<dd><p>Assigns the given color to the seriesList</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=color(collectd.hostname.cpu.0.user, 'green')\n&amp;target=color(collectd.hostname.cpu.0.system, 'ff0000')\n&amp;target=color(collectd.hostname.cpu.0.idle, 'gray')\n&amp;target=color(collectd.hostname.cpu.0.idle, '6464ffaa')\n</pre></div>\n</div>\n</dd></dl>"},"consolidateBy":{"signature":"consolidateBy(seriesList, consolidationFunc)","examples":["consolidateBy(Sales.widgets.largeBlue, 'sum')","consolidateBy(Servers.web01.sda1.free_space, 'max')"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.consolidateBy\">\n<tt class=\"descname\">consolidateBy</tt><big>(</big><em>seriesList</em>, <em>consolidationFunc</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList and a consolidation function name.</p>\n<p>Valid function names are ‘sum’, ‘average’, ‘min’, and ‘max’</p>\n<p>When a graph is drawn where width of the graph size in pixels is smaller than\nthe number of datapoints to be graphed, Graphite consolidates the values to\nto prevent line overlap. The consolidateBy() function changes the consolidation\nfunction from the default of ‘average’ to one of ‘sum’, ‘max’, or ‘min’. This is\nespecially useful in sales graphs, where fractional values make no sense and a ‘sum’\nof consolidated values is appropriate.</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=consolidateBy(Sales.widgets.largeBlue, 'sum')\n&amp;target=consolidateBy(Servers.web01.sda1.free_space, 'max')\n</pre></div>\n</div>\n</dd></dl>"},"constantLine":{"signature":"constantLine(value)","examples":["constantLine(123.456)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.constantLine\">\n<tt class=\"descname\">constantLine</tt><big>(</big><em>value</em><big>)</big></dt>\n<dd><p>Takes a float F.</p>\n<p>Draws a horizontal line at value F across the graph.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=constantLine(123.456)\n</pre></div>\n</div>\n</dd></dl>"},"countSeries":{"signature":"countSeries(*seriesLists)","examples":["countSeries(carbon.agents.*.*)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.countSeries\">\n<tt class=\"descname\">countSeries</tt><big>(</big><em>*seriesLists</em><big>)</big></dt>\n<dd><p>Draws a horizontal line representing the number of nodes found in the seriesList.</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=countSeries(carbon.agents.*.*)\n</pre></div>\n</div>\n</dd></dl>"},"cumulative":{"signature":"cumulative(seriesList, consolidationFunc='sum')","examples":["cumulative(Sales.widgets.largeBlue)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.cumulative\">\n<tt class=\"descname\">cumulative</tt><big>(</big><em>seriesList</em>, <em>consolidationFunc='sum'</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList, and an optional function.</p>\n<p>Valid functions are ‘sum’, ‘average’, ‘min’, and ‘max’</p>\n<p>Sets the consolidation function to ‘sum’ for the given metric seriesList.</p>\n<p>Alias for <a class=\"reference internal\" href=\"#graphite.render.functions.consolidateBy\" title=\"graphite.render.functions.consolidateBy\"><tt class=\"xref py py-func docutils literal\"><span class=\"pre\">consolidateBy(series,</span> <span class=\"pre\">'sum')</span></tt></a></p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=cumulative(Sales.widgets.largeBlue)\n</pre></div>\n</div>\n</dd></dl>"},"currentAbove":{"signature":"currentAbove(seriesList, n)","examples":["currentAbove(server*.instance*.threads.busy,50)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.currentAbove\">\n<tt class=\"descname\">currentAbove</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by an integer N.\nOut of all metrics passed, draws only the  metrics whose value is above N\nat the end of the time period specified.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=currentAbove(server*.instance*.threads.busy,50)\n</pre></div>\n</div>\n<p>Draws the servers with more than 50 busy threads.</p>\n</dd></dl>"},"currentBelow":{"signature":"currentBelow(seriesList, n)","examples":["currentBelow(server*.instance*.threads.busy,3)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.currentBelow\">\n<tt class=\"descname\">currentBelow</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by an integer N.\nOut of all metrics passed, draws only the  metrics whose value is below N\nat the end of the time period specified.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=currentBelow(server*.instance*.threads.busy,3)\n</pre></div>\n</div>\n<p>Draws the servers with less than 3 busy threads.</p>\n</dd></dl>"},"dashed":{"signature":"dashed(*seriesList)","examples":["dashed(server01.instance01.memory.free,2.5)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.dashed\">\n<tt class=\"descname\">dashed</tt><big>(</big><em>*seriesList</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList, followed by a float F.</p>\n<p>Draw the selected metrics with a dotted line with segments of length F\nIf omitted, the default length of the segments is 5.0</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=dashed(server01.instance01.memory.free,2.5)\n</pre></div>\n</div>\n</dd></dl>"},"derivative":{"signature":"derivative(seriesList)","examples":["derivative(company.server.application01.ifconfig.TXPackets)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.derivative\">\n<tt class=\"descname\">derivative</tt><big>(</big><em>seriesList</em><big>)</big></dt>\n<dd><p>This is the opposite of the integral function.  This is useful for taking a\nrunning total metric and calculating the delta between subsequent data points.</p>\n<p>This function does not normalize for periods of time, as a true derivative would.\nInstead see the perSecond() function to calculate a rate of change over time.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=derivative(company.server.application01.ifconfig.TXPackets)\n</pre></div>\n</div>\n<p>Each time you run ifconfig, the RX and TXPackets are higher (assuming there\nis network traffic.) By applying the derivative function, you can get an\nidea of the packets per minute sent or received, even though you’re only\nrecording the total.</p>\n</dd></dl>"},"diffSeries":{"signature":"diffSeries(*seriesLists)","examples":["diffSeries(service.connections.total,service.connections.failed)","diffSeries(service.connections.total,5)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.diffSeries\">\n<tt class=\"descname\">diffSeries</tt><big>(</big><em>*seriesLists</em><big>)</big></dt>\n<dd><p>Can take two or more metrics, or a single metric and a constant.\nSubtracts parameters 2 through n from parameter 1.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=diffSeries(service.connections.total,service.connections.failed)\n&amp;target=diffSeries(service.connections.total,5)\n</pre></div>\n</div>\n</dd></dl>"},"divideSeries":{"signature":"divideSeries(dividendSeriesList, divisorSeriesList)","examples":["divideSeries(Series.dividends,Series.divisors)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.divideSeries\">\n<tt class=\"descname\">divideSeries</tt><big>(</big><em>dividendSeriesList</em>, <em>divisorSeriesList</em><big>)</big></dt>\n<dd><p>Takes a dividend metric and a divisor metric and draws the division result.\nA constant may <em>not</em> be passed. To divide by a constant, use the scale()\nfunction (which is essentially a multiplication operation) and use the inverse\nof the dividend. (Division by 8 = multiplication by 1/8 or 0.125)</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=divideSeries(Series.dividends,Series.divisors)\n</pre></div>\n</div>\n</dd></dl>"},"drawAsInfinite":{"signature":"drawAsInfinite(seriesList)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.drawAsInfinite\">\n<tt class=\"descname\">drawAsInfinite</tt><big>(</big><em>seriesList</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList.\nIf the value is zero, draw the line at 0.  If the value is above zero, draw\nthe line at infinity. If the value is null or less than zero, do not draw\nthe line.</p>\n<p>Useful for displaying on/off metrics, such as exit codes. (0 = success,\nanything else = failure.)</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>drawAsInfinite(Testing.script.exitCode)\n</pre></div>\n</div>\n</dd></dl>"},"events":{"signature":"events(*tags)","examples":["events(\"tag-one\", \"tag-two\")","events(\"*\")"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.events\">\n<tt class=\"descname\">events</tt><big>(</big><em>*tags</em><big>)</big></dt>\n<dd><p>Returns the number of events at this point in time. Usable with\ndrawAsInfinite.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=events(\"tag-one\", \"tag-two\")\n&amp;target=events(\"*\")\n</pre></div>\n</div>\n<p>Returns all events tagged as “tag-one” and “tag-two” and the second one\nreturns all events.</p>\n</dd></dl>"},"exclude":{"signature":"exclude(seriesList, pattern)","examples":["exclude(servers*.instance*.threads.busy,\"server02\")"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.exclude\">\n<tt class=\"descname\">exclude</tt><big>(</big><em>seriesList</em>, <em>pattern</em><big>)</big></dt>\n<dd><p>Takes a metric or a wildcard seriesList, followed by a regular expression\nin double quotes.  Excludes metrics that match the regular expression.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=exclude(servers*.instance*.threads.busy,\"server02\")\n</pre></div>\n</div>\n</dd></dl>"},"grep":{"signature":"grep(seriesList, pattern)","examples":["grep(servers*.instance*.threads.busy,\"server02\")"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.grep\">\n<tt class=\"descname\">grep</tt><big>(</big><em>seriesList</em>, <em>pattern</em><big>)</big></dt>\n<dd><p>Takes a metric or a wildcard seriesList, followed by a regular expression\nin double quotes.  Excludes metrics that don’t match the regular expression.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=grep(servers*.instance*.threads.busy,\"server02\")\n</pre></div>\n</div>\n</dd></dl>"},"group":{"signature":"group(*seriesLists)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.group\">\n<tt class=\"descname\">group</tt><big>(</big><em>*seriesLists</em><big>)</big></dt>\n<dd><p>Takes an arbitrary number of seriesLists and adds them to a single seriesList. This is used\nto pass multiple seriesLists to a function which only takes one</p>\n</dd></dl>"},"groupByNode":{"signature":"groupByNode(seriesList, nodeNum, callback)","examples":["groupByNode(ganglia.by-function.*.*.cpu.load5,2,\"sumSeries\")"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.groupByNode\">\n<tt class=\"descname\">groupByNode</tt><big>(</big><em>seriesList</em>, <em>nodeNum</em>, <em>callback</em><big>)</big></dt>\n<dd><p>Takes a serieslist and maps a callback to subgroups within as defined by a common node</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=groupByNode(ganglia.by-function.*.*.cpu.load5,2,\"sumSeries\")\n\nWould return multiple series which are each the result of applying the \"sumSeries\" function\nto groups joined on the second node (0 indexed) resulting in a list of targets like\nsumSeries(ganglia.by-function.server1.*.cpu.load5),sumSeries(ganglia.by-function.server2.*.cpu.load5),...\n</pre></div>\n</div>\n</dd></dl>"},"highestAverage":{"signature":"highestAverage(seriesList, n)","examples":["highestAverage(server*.instance*.threads.busy,5)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.highestAverage\">\n<tt class=\"descname\">highestAverage</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by an integer N.\nOut of all metrics passed, draws only the top N metrics with the highest\naverage value for the time period specified.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=highestAverage(server*.instance*.threads.busy,5)\n</pre></div>\n</div>\n<p>Draws the top 5 servers with the highest average value.</p>\n</dd></dl>"},"highestCurrent":{"signature":"highestCurrent(seriesList, n)","examples":["highestCurrent(server*.instance*.threads.busy,5)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.highestCurrent\">\n<tt class=\"descname\">highestCurrent</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by an integer N.\nOut of all metrics passed, draws only the N metrics with the highest value\nat the end of the time period specified.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=highestCurrent(server*.instance*.threads.busy,5)\n</pre></div>\n</div>\n<p>Draws the 5 servers with the highest busy threads.</p>\n</dd></dl>"},"highestMax":{"signature":"highestMax(seriesList, n)","examples":["highestMax(server*.instance*.threads.busy,5)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.highestMax\">\n<tt class=\"descname\">highestMax</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by an integer N.</p>\n<p>Out of all metrics passed, draws only the N metrics with the highest maximum\nvalue in the time period specified.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=highestMax(server*.instance*.threads.busy,5)\n</pre></div>\n</div>\n<p>Draws the top 5 servers who have had the most busy threads during the time\nperiod specified.</p>\n</dd></dl>"},"hitcount":{"signature":"hitcount(seriesList, intervalString, alignToInterval=False)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.hitcount\">\n<tt class=\"descname\">hitcount</tt><big>(</big><em>seriesList</em>, <em>intervalString</em>, <em>alignToInterval=False</em><big>)</big></dt>\n<dd><p>Estimate hit counts from a list of time series.</p>\n<p>This function assumes the values in each time series represent\nhits per second.  It calculates hits per some larger interval\nsuch as per day or per hour.  This function is like summarize(),\nexcept that it compensates automatically for different time scales\n(so that a similar graph results from using either fine-grained\nor coarse-grained records) and handles rarely-occurring events\ngracefully.</p>\n</dd></dl>"},"holtWintersAberration":{"signature":"holtWintersAberration(seriesList, delta=3)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.holtWintersAberration\">\n<tt class=\"descname\">holtWintersAberration</tt><big>(</big><em>seriesList</em>, <em>delta=3</em><big>)</big></dt>\n<dd><p>Performs a Holt-Winters forecast using the series as input data and plots the\npositive or negative deviation of the series data from the forecast.</p>\n</dd></dl>"},"holtWintersConfidenceArea":{"signature":"holtWintersConfidenceArea(seriesList, delta=3)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.holtWintersConfidenceArea\">\n<tt class=\"descname\">holtWintersConfidenceArea</tt><big>(</big><em>seriesList</em>, <em>delta=3</em><big>)</big></dt>\n<dd><p>Performs a Holt-Winters forecast using the series as input data and plots the\narea between the upper and lower bands of the predicted forecast deviations.</p>\n</dd></dl>"},"holtWintersConfidenceBands":{"signature":"holtWintersConfidenceBands(seriesList, delta=3)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.holtWintersConfidenceBands\">\n<tt class=\"descname\">holtWintersConfidenceBands</tt><big>(</big><em>seriesList</em>, <em>delta=3</em><big>)</big></dt>\n<dd><p>Performs a Holt-Winters forecast using the series as input data and plots\nupper and lower bands with the predicted forecast deviations.</p>\n</dd></dl>"},"holtWintersForecast":{"signature":"holtWintersForecast(seriesList)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.holtWintersForecast\">\n<tt class=\"descname\">holtWintersForecast</tt><big>(</big><em>seriesList</em><big>)</big></dt>\n<dd><p>Performs a Holt-Winters forecast using the series as input data. Data from\none week previous to the series is used to bootstrap the initial forecast.</p>\n</dd></dl>"},"identity":{"signature":"identity(name)","examples":["identity(\"The.time.series\")"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.identity\">\n<tt class=\"descname\">identity</tt><big>(</big><em>name</em><big>)</big></dt>\n<dd><p>Identity function:\nReturns datapoints where the value equals the timestamp of the datapoint.\nUseful when you have another series where the value is a timestamp, and\nyou want to compare it to the time of the datapoint, to render an age</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=identity(\"The.time.series\")\n</pre></div>\n</div>\n<p>This would create a series named “The.time.series” that contains points where\nx(t) == t.</p>\n</dd></dl>"},"integral":{"signature":"integral(seriesList)","examples":["integral(company.sales.perMinute)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.integral\">\n<tt class=\"descname\">integral</tt><big>(</big><em>seriesList</em><big>)</big></dt>\n<dd><p>This will show the sum over time, sort of like a continuous addition function.\nUseful for finding totals or trends in metrics that are collected per minute.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=integral(company.sales.perMinute)\n</pre></div>\n</div>\n<p>This would start at zero on the left side of the graph, adding the sales each\nminute, and show the total sales for the time period selected at the right\nside, (time now, or the time specified by ‘&amp;until=’).</p>\n</dd></dl>"},"invert":{"signature":"invert(seriesList)","examples":["invert(Server.instance01.threads.busy)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.invert\">\n<tt class=\"descname\">invert</tt><big>(</big><em>seriesList</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList, and inverts each datapoint (i.e. 1/x).</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=invert(Server.instance01.threads.busy)\n</pre></div>\n</div>\n</dd></dl>"},"keepLastValue":{"signature":"keepLastValue(seriesList, limit=inf)","examples":["keepLastValue(Server01.connections.handled)","keepLastValue(Server01.connections.handled, 10)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.keepLastValue\">\n<tt class=\"descname\">keepLastValue</tt><big>(</big><em>seriesList</em>, <em>limit=inf</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList, and optionally a limit to the number of ‘None’ values to skip over.\nContinues the line with the last received value when gaps (‘None’ values) appear in your data, rather than breaking your line.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=keepLastValue(Server01.connections.handled)\n&amp;target=keepLastValue(Server01.connections.handled, 10)\n</pre></div>\n</div>\n</dd></dl>"},"legendValue":{"signature":"legendValue(seriesList, *valueTypes)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.legendValue\">\n<tt class=\"descname\">legendValue</tt><big>(</big><em>seriesList</em>, <em>*valueTypes</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList and a string in quotes.\nAppends a value to the metric name in the legend.  Currently one or several of: <cite>last</cite>, <cite>avg</cite>,\n<cite>total</cite>, <cite>min</cite>, <cite>max</cite>.\nThe last argument can be <cite>si</cite> (default) or <cite>binary</cite>, in that case values will be formatted in the\ncorresponding system.</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>\n</pre></div>\n</div>\n<p>&amp;target=legendValue(Sales.widgets.largeBlue, ‘avg’, ‘max’, ‘si’)</p>\n</dd></dl>"},"limit":{"signature":"limit(seriesList, n)","examples":["limit(server*.instance*.memory.free,5)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.limit\">\n<tt class=\"descname\">limit</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by an integer N.</p>\n<p>Only draw the first N metrics.  Useful when testing a wildcard in a metric.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=limit(server*.instance*.memory.free,5)\n</pre></div>\n</div>\n<p>Draws only the first 5 instance’s memory free.</p>\n</dd></dl>"},"lineWidth":{"signature":"lineWidth(seriesList, width)","examples":["lineWidth(server01.instance01.memory.free,5)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.lineWidth\">\n<tt class=\"descname\">lineWidth</tt><big>(</big><em>seriesList</em>, <em>width</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList, followed by a float F.</p>\n<p>Draw the selected metrics with a line width of F, overriding the default\nvalue of 1, or the &amp;lineWidth=X.X parameter.</p>\n<p>Useful for highlighting a single metric out of many, or having multiple\nline widths in one graph.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=lineWidth(server01.instance01.memory.free,5)\n</pre></div>\n</div>\n</dd></dl>"},"logarithm":{"signature":"logarithm(seriesList, base=10)","examples":["log(carbon.agents.hostname.avgUpdateTime,2)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.logarithm\">\n<tt class=\"descname\">logarithm</tt><big>(</big><em>seriesList</em>, <em>base=10</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList, a base, and draws the y-axis in logarithmic\nformat.  If base is omitted, the function defaults to base 10.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=log(carbon.agents.hostname.avgUpdateTime,2)\n</pre></div>\n</div>\n</dd></dl>"},"lowestAverage":{"signature":"lowestAverage(seriesList, n)","examples":["lowestAverage(server*.instance*.threads.busy,5)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.lowestAverage\">\n<tt class=\"descname\">lowestAverage</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by an integer N.\nOut of all metrics passed, draws only the bottom N metrics with the lowest\naverage value for the time period specified.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=lowestAverage(server*.instance*.threads.busy,5)\n</pre></div>\n</div>\n<p>Draws the bottom 5 servers with the lowest average value.</p>\n</dd></dl>"},"lowestCurrent":{"signature":"lowestCurrent(seriesList, n)","examples":["lowestCurrent(server*.instance*.threads.busy,5)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.lowestCurrent\">\n<tt class=\"descname\">lowestCurrent</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by an integer N.\nOut of all metrics passed, draws only the N metrics with the lowest value at\nthe end of the time period specified.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=lowestCurrent(server*.instance*.threads.busy,5)\n</pre></div>\n</div>\n<p>Draws the 5 servers with the least busy threads right now.</p>\n</dd></dl>"},"maxSeries":{"signature":"maxSeries(*seriesLists)","examples":["maxSeries(Server*.connections.total)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.maxSeries\">\n<tt class=\"descname\">maxSeries</tt><big>(</big><em>*seriesLists</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList.\nFor each datapoint from each metric passed in, pick the maximum value and graph it.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=maxSeries(Server*.connections.total)\n</pre></div>\n</div>\n</dd></dl>"},"maximumAbove":{"signature":"maximumAbove(seriesList, n)","examples":["maximumAbove(system.interface.eth*.packetsSent,1000)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.maximumAbove\">\n<tt class=\"descname\">maximumAbove</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by a constant n.\nDraws only the metrics with a maximum value above n.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=maximumAbove(system.interface.eth*.packetsSent,1000)\n</pre></div>\n</div>\n<p>This would only display interfaces which sent more than 1000 packets/min.</p>\n</dd></dl>"},"maximumBelow":{"signature":"maximumBelow(seriesList, n)","examples":["maximumBelow(system.interface.eth*.packetsSent,1000)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.maximumBelow\">\n<tt class=\"descname\">maximumBelow</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by a constant n.\nDraws only the metrics with a maximum value below n.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=maximumBelow(system.interface.eth*.packetsSent,1000)\n</pre></div>\n</div>\n<p>This would only display interfaces which sent less than 1000 packets/min.</p>\n</dd></dl>"},"minSeries":{"signature":"minSeries(*seriesLists)","examples":["minSeries(Server*.connections.total)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.minSeries\">\n<tt class=\"descname\">minSeries</tt><big>(</big><em>*seriesLists</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList.\nFor each datapoint from each metric passed in, pick the minimum value and graph it.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=minSeries(Server*.connections.total)\n</pre></div>\n</div>\n</dd></dl>"},"minimumAbove":{"signature":"minimumAbove(seriesList, n)","examples":["minimumAbove(system.interface.eth*.packetsSent,1000)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.minimumAbove\">\n<tt class=\"descname\">minimumAbove</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by a constant n.\nDraws only the metrics with a minimum value above n.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=minimumAbove(system.interface.eth*.packetsSent,1000)\n</pre></div>\n</div>\n<p>This would only display interfaces which sent more than 1000 packets/min.</p>\n</dd></dl>"},"mostDeviant":{"signature":"mostDeviant(seriesList, n)","examples":["mostDeviant(5, server*.instance*.memory.free)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.mostDeviant\">\n<tt class=\"descname\">mostDeviant</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by an integer N.\nDraws the N most deviant metrics.\nTo find the deviants, the standard deviation (sigma) of each series\nis taken and ranked. The top N standard deviations are returned.</p>\n<blockquote>\n<div>Example:</div></blockquote>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=mostDeviant(5, server*.instance*.memory.free)\n</pre></div>\n</div>\n<p>Draws the 5 instances furthest from the average memory free.</p>\n</dd></dl>"},"movingAverage":{"signature":"movingAverage(seriesList, windowSize)","examples":["movingAverage(Server.instance01.threads.busy,10)","movingAverage(Server.instance*.threads.idle,'5min')"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.movingAverage\">\n<tt class=\"descname\">movingAverage</tt><big>(</big><em>seriesList</em>, <em>windowSize</em><big>)</big></dt>\n<dd><p>Graphs the moving average of a metric (or metrics) over a fixed number of\npast points, or a time interval.</p>\n<p>Takes one metric or a wildcard seriesList followed by a number N of datapoints\nor a quoted string with a length of time like ‘1hour’ or ‘5min’ (See <tt class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">/</span>\n<span class=\"pre\">until</span></tt> in the render_api_ for examples of time formats). Graphs the\naverage of the preceeding datapoints for each point on the graph. All\nprevious datapoints are set to None at the beginning of the graph.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=movingAverage(Server.instance01.threads.busy,10)\n&amp;target=movingAverage(Server.instance*.threads.idle,'5min')\n</pre></div>\n</div>\n</dd></dl>"},"movingMedian":{"signature":"movingMedian(seriesList, windowSize)","examples":["movingMedian(Server.instance01.threads.busy,10)","movingMedian(Server.instance*.threads.idle,'5min')"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.movingMedian\">\n<tt class=\"descname\">movingMedian</tt><big>(</big><em>seriesList</em>, <em>windowSize</em><big>)</big></dt>\n<dd><p>Graphs the moving median of a metric (or metrics) over a fixed number of\npast points, or a time interval.</p>\n<p>Takes one metric or a wildcard seriesList followed by a number N of datapoints\nor a quoted string with a length of time like ‘1hour’ or ‘5min’ (See <tt class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">/</span>\n<span class=\"pre\">until</span></tt> in the render_api_ for examples of time formats). Graphs the\nmedian of the preceeding datapoints for each point on the graph. All\nprevious datapoints are set to None at the beginning of the graph.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=movingMedian(Server.instance01.threads.busy,10)\n&amp;target=movingMedian(Server.instance*.threads.idle,'5min')\n</pre></div>\n</div>\n</dd></dl>"},"multiplySeries":{"signature":"multiplySeries(*seriesLists)","examples":["multiplySeries(Series.dividends,Series.divisors)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.multiplySeries\">\n<tt class=\"descname\">multiplySeries</tt><big>(</big><em>*seriesLists</em><big>)</big></dt>\n<dd><p>Takes two or more series and multiplies their points. A constant may not be\nused. To multiply by a constant, use the scale() function.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=multiplySeries(Series.dividends,Series.divisors)\n</pre></div>\n</div>\n</dd></dl>"},"nPercentile":{"signature":"nPercentile(seriesList, n)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.nPercentile\">\n<tt class=\"descname\">nPercentile</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Returns n-percent of each series in the seriesList.</p>\n</dd></dl>"},"nonNegativeDerivative":{"signature":"nonNegativeDerivative(seriesList, maxValue=None)","examples":["nonNegativederivative(company.server.application01.ifconfig.TXPackets)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.nonNegativeDerivative\">\n<tt class=\"descname\">nonNegativeDerivative</tt><big>(</big><em>seriesList</em>, <em>maxValue=None</em><big>)</big></dt>\n<dd><p>Same as the derivative function above, but ignores datapoints that trend\ndown.  Useful for counters that increase for a long time, then wrap or\nreset. (Such as if a network interface is destroyed and recreated by unloading\nand re-loading a kernel module, common with USB / WiFi cards.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=nonNegativederivative(company.server.application01.ifconfig.TXPackets)\n</pre></div>\n</div>\n</dd></dl>"},"offset":{"signature":"offset(seriesList, factor)","examples":["offset(Server.instance01.threads.busy,10)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.offset\">\n<tt class=\"descname\">offset</tt><big>(</big><em>seriesList</em>, <em>factor</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by a constant, and adds the constant to\neach datapoint.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=offset(Server.instance01.threads.busy,10)\n</pre></div>\n</div>\n</dd></dl>"},"perSecond":{"signature":"perSecond(seriesList, maxValue=None)","examples":["perSecond(company.server.application01.ifconfig.TXPackets)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.perSecond\">\n<tt class=\"descname\">perSecond</tt><big>(</big><em>seriesList</em>, <em>maxValue=None</em><big>)</big></dt>\n<dd><p>Derivative adjusted for the series time interval\nThis is useful for taking a running total metric and showing how many requests\nper second were handled.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=perSecond(company.server.application01.ifconfig.TXPackets)\n</pre></div>\n</div>\n<p>Each time you run ifconfig, the RX and TXPackets are higher (assuming there\nis network traffic.) By applying the derivative function, you can get an\nidea of the packets per minute sent or received, even though you’re only\nrecording the total.</p>\n</dd></dl>"},"percentileOfSeries":{"signature":"percentileOfSeries(seriesList, n, interpolate=False)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.percentileOfSeries\">\n<tt class=\"descname\">percentileOfSeries</tt><big>(</big><em>seriesList</em>, <em>n</em>, <em>interpolate=False</em><big>)</big></dt>\n<dd><p>percentileOfSeries returns a single series which is composed of the n-percentile\nvalues taken across a wildcard series at each point. Unless <cite>interpolate</cite> is\nset to True, percentile values are actual values contained in one of the\nsupplied series.</p>\n</dd></dl>"},"randomWalkFunction":{"signature":"randomWalkFunction(name)","examples":["randomWalk(\"The.time.series\")"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.randomWalkFunction\">\n<tt class=\"descname\">randomWalkFunction</tt><big>(</big><em>name</em><big>)</big></dt>\n<dd><p>Short Alias: randomWalk()</p>\n<p>Returns a random walk starting at 0. This is great for testing when there is\nno real data in whisper.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=randomWalk(\"The.time.series\")\n</pre></div>\n</div>\n<p>This would create a series named “The.time.series” that contains points where\nx(t) == x(t-1)+random()-0.5, and x(0) == 0.</p>\n</dd></dl>"},"rangeOfSeries":{"signature":"rangeOfSeries(*seriesLists)","examples":["rangeOfSeries(Server*.connections.total)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.rangeOfSeries\">\n<tt class=\"descname\">rangeOfSeries</tt><big>(</big><em>*seriesLists</em><big>)</big></dt>\n<dd><p>Takes a wildcard seriesList.\nDistills down a set of inputs into the range of the series</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=rangeOfSeries(Server*.connections.total)\n</pre></div>\n</div>\n</dd></dl>"},"removeAbovePercentile":{"signature":"removeAbovePercentile(seriesList, n)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.removeAbovePercentile\">\n<tt class=\"descname\">removeAbovePercentile</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Removes data above the nth percentile from the series or list of series provided.\nValues above this percentile are assigned a value of None.</p>\n</dd></dl>"},"removeAboveValue":{"signature":"removeAboveValue(seriesList, n)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.removeAboveValue\">\n<tt class=\"descname\">removeAboveValue</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Removes data above the given threshold from the series or list of series provided.\nValues above this threshole are assigned a value of None</p>\n</dd></dl>"},"removeBelowPercentile":{"signature":"removeBelowPercentile(seriesList, n)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.removeBelowPercentile\">\n<tt class=\"descname\">removeBelowPercentile</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Removes data below the nth percentile from the series or list of series provided.\nValues below this percentile are assigned a value of None.</p>\n</dd></dl>"},"removeBelowValue":{"signature":"removeBelowValue(seriesList, n)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.removeBelowValue\">\n<tt class=\"descname\">removeBelowValue</tt><big>(</big><em>seriesList</em>, <em>n</em><big>)</big></dt>\n<dd><p>Removes data below the given threshold from the series or list of series provided.\nValues below this threshole are assigned a value of None</p>\n</dd></dl>"},"scale":{"signature":"scale(seriesList, factor)","examples":["scale(Server.instance01.threads.busy,10)","scale(Server.instance*.threads.busy,10)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.scale\">\n<tt class=\"descname\">scale</tt><big>(</big><em>seriesList</em>, <em>factor</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by a constant, and multiplies the datapoint\nby the constant provided at each point.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=scale(Server.instance01.threads.busy,10)\n&amp;target=scale(Server.instance*.threads.busy,10)\n</pre></div>\n</div>\n</dd></dl>"},"scaleToSeconds":{"signature":"scaleToSeconds(seriesList, seconds)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.scaleToSeconds\">\n<tt class=\"descname\">scaleToSeconds</tt><big>(</big><em>seriesList</em>, <em>seconds</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList and returns “value per seconds” where\nseconds is a last argument to this functions.</p>\n<p>Useful in conjunction with derivative or integral function if you want\nto normalize its result to a known resolution for arbitrary retentions</p>\n</dd></dl>"},"secondYAxis":{"signature":"secondYAxis(seriesList)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.secondYAxis\">\n<tt class=\"descname\">secondYAxis</tt><big>(</big><em>seriesList</em><big>)</big></dt>\n<dd><p>Graph the series on the secondary Y axis.</p>\n</dd></dl>"},"sinFunction":{"signature":"sinFunction(name, amplitude=1)","examples":["sin(\"The.time.series\", 2)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.sinFunction\">\n<tt class=\"descname\">sinFunction</tt><big>(</big><em>name</em>, <em>amplitude=1</em><big>)</big></dt>\n<dd><p>Short Alias: sin()</p>\n<p>Just returns the sine of the current time. The optional amplitude parameter\nchanges the amplitude of the wave.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=sin(\"The.time.series\", 2)\n</pre></div>\n</div>\n<p>This would create a series named “The.time.series” that contains sin(x)*2.</p>\n</dd></dl>"},"smartSummarize":{"signature":"smartSummarize(seriesList, intervalString, func='sum', alignToFrom=False)","examples":[],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.smartSummarize\">\n<tt class=\"descname\">smartSummarize</tt><big>(</big><em>seriesList</em>, <em>intervalString</em>, <em>func='sum'</em>, <em>alignToFrom=False</em><big>)</big></dt>\n<dd><p>Smarter experimental version of summarize.</p>\n<p>The alignToFrom parameter has been deprecated, it no longer has any effect.\nAlignment happens automatically for days, hours, and minutes.</p>\n</dd></dl>"},"sortByMaxima":{"signature":"sortByMaxima(seriesList)","examples":["sortByMaxima(server*.instance*.memory.free)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.sortByMaxima\">\n<tt class=\"descname\">sortByMaxima</tt><big>(</big><em>seriesList</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList.</p>\n<p>Sorts the list of metrics by the maximum value across the time period\nspecified.  Useful with the &amp;areaMode=all parameter, to keep the\nlowest value lines visible.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=sortByMaxima(server*.instance*.memory.free)\n</pre></div>\n</div>\n</dd></dl>"},"sortByMinima":{"signature":"sortByMinima(seriesList)","examples":["sortByMinima(server*.instance*.memory.free)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.sortByMinima\">\n<tt class=\"descname\">sortByMinima</tt><big>(</big><em>seriesList</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList.</p>\n<p>Sorts the list of metrics by the lowest value across the time period\nspecified.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=sortByMinima(server*.instance*.memory.free)\n</pre></div>\n</div>\n</dd></dl>"},"stacked":{"signature":"stacked(seriesLists, stackName='__DEFAULT__')","examples":["stacked(company.server.application01.ifconfig.TXPackets, 'tx')"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.stacked\">\n<tt class=\"descname\">stacked</tt><big>(</big><em>seriesLists</em>, <em>stackName='__DEFAULT__'</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList and change them so they are\nstacked. This is a way of stacking just a couple of metrics without having\nto use the stacked area mode (that stacks everything). By means of this a mixed\nstacked and non stacked graph can be made</p>\n<p>It can also take an optional argument with a name of the stack, in case there is\nmore than one, e.g. for input and output metrics.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=stacked(company.server.application01.ifconfig.TXPackets, 'tx')\n</pre></div>\n</div>\n</dd></dl>"},"stddevSeries":{"signature":"stddevSeries(*seriesLists)","examples":["stddevSeries(company.server.*.threads.busy)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.stddevSeries\">\n<tt class=\"descname\">stddevSeries</tt><big>(</big><em>*seriesLists</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList.\nDraws the standard deviation of all metrics passed at each time.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=stddevSeries(company.server.*.threads.busy)\n</pre></div>\n</div>\n</dd></dl>"},"stdev":{"signature":"stdev(seriesList, points, windowTolerance=0.1)","examples":["stdev(server*.instance*.threads.busy,30)","stdev(server*.instance*.cpu.system,30,0.0)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.stdev\">\n<tt class=\"descname\">stdev</tt><big>(</big><em>seriesList</em>, <em>points</em>, <em>windowTolerance=0.1</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by an integer N.\nDraw the Standard Deviation of all metrics passed for the past N datapoints.\nIf the ratio of null points in the window is greater than windowTolerance,\nskip the calculation. The default for windowTolerance is 0.1 (up to 10% of points\nin the window can be missing). Note that if this is set to 0.0, it will cause large\ngaps in the output anywhere a single point is missing.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=stdev(server*.instance*.threads.busy,30)\n&amp;target=stdev(server*.instance*.cpu.system,30,0.0)\n</pre></div>\n</div>\n</dd></dl>"},"substr":{"signature":"substr(seriesList, start=0, stop=0)","examples":["substr(carbon.agents.hostname.avgUpdateTime,2,4)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.substr\">\n<tt class=\"descname\">substr</tt><big>(</big><em>seriesList</em>, <em>start=0</em>, <em>stop=0</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList followed by 1 or 2 integers.  Assume that the\nmetric name is a list or array, with each element separated by dots.  Prints\nn - length elements of the array (if only one integer n is passed) or n - m\nelements of the array (if two integers n and m are passed).  The list starts\nwith element 0 and ends with element (length - 1).</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=substr(carbon.agents.hostname.avgUpdateTime,2,4)\n</pre></div>\n</div>\n<p>The label would be printed as “hostname.avgUpdateTime”.</p>\n</dd></dl>"},"sumSeries":{"signature":"sumSeries(*seriesLists)","examples":["sum(company.server.application*.requestsHandled)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.sumSeries\">\n<tt class=\"descname\">sumSeries</tt><big>(</big><em>*seriesLists</em><big>)</big></dt>\n<dd><p>Short form: sum()</p>\n<p>This will add metrics together and return the sum at each datapoint. (See\nintegral for a sum over time)</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=sum(company.server.application*.requestsHandled)\n</pre></div>\n</div>\n<p>This would show the sum of all requests handled per minute (provided\nrequestsHandled are collected once a minute).   If metrics with different\nretention rates are combined, the coarsest metric is graphed, and the sum\nof the other metrics is averaged for the metrics with finer retention rates.</p>\n</dd></dl>"},"sumSeriesWithWildcards":{"signature":"sumSeriesWithWildcards(seriesList, *position)","examples":["sumSeriesWithWildcards(host.cpu-[0-7].cpu-{user,system}.value, 1)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.sumSeriesWithWildcards\">\n<tt class=\"descname\">sumSeriesWithWildcards</tt><big>(</big><em>seriesList</em>, <em>*position</em><big>)</big></dt>\n<dd><p>Call sumSeries after inserting wildcards at the given position(s).</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=sumSeriesWithWildcards(host.cpu-[0-7].cpu-{user,system}.value, 1)\n</pre></div>\n</div>\n<p>This would be the equivalent of\n<tt class=\"docutils literal\"><span class=\"pre\">target=sumSeries(host.*.cpu-user.value)&amp;target=sumSeries(host.*.cpu-system.value)</span></tt></p>\n</dd></dl>"},"summarize":{"signature":"summarize(seriesList, intervalString, func='sum', alignToFrom=False)","examples":["summarize(counter.errors, \"1hour\") # total errors per hour","summarize(nonNegativeDerivative(gauge.num_users), \"1week\") # new users per week","summarize(queue.size, \"1hour\", \"avg\") # average queue size per hour","summarize(queue.size, \"1hour\", \"max\") # maximum queue size during each hour","summarize(metric, \"13week\", \"avg\", true)&from=midnight+20100101 # 2010 Q1-4"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.summarize\">\n<tt class=\"descname\">summarize</tt><big>(</big><em>seriesList</em>, <em>intervalString</em>, <em>func='sum'</em>, <em>alignToFrom=False</em><big>)</big></dt>\n<dd><p>Summarize the data into interval buckets of a certain size.</p>\n<p>By default, the contents of each interval bucket are summed together. This is\nuseful for counters where each increment represents a discrete event and\nretrieving a “per X” value requires summing all the events in that interval.</p>\n<p>Specifying ‘avg’ instead will return the mean for each bucket, which can be more\nuseful when the value is a gauge that represents a certain value in time.</p>\n<p>‘max’, ‘min’ or ‘last’ can also be specified.</p>\n<p>By default, buckets are caculated by rounding to the nearest interval. This\nworks well for intervals smaller than a day. For example, 22:32 will end up\nin the bucket 22:00-23:00 when the interval=1hour.</p>\n<p>Passing alignToFrom=true will instead create buckets starting at the from\ntime. In this case, the bucket for 22:32 depends on the from time. If\nfrom=6:30 then the 1hour bucket for 22:32 is 22:30-23:30.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=summarize(counter.errors, \"1hour\") # total errors per hour\n&amp;target=summarize(nonNegativeDerivative(gauge.num_users), \"1week\") # new users per week\n&amp;target=summarize(queue.size, \"1hour\", \"avg\") # average queue size per hour\n&amp;target=summarize(queue.size, \"1hour\", \"max\") # maximum queue size during each hour\n&amp;target=summarize(metric, \"13week\", \"avg\", true)&amp;from=midnight+20100101 # 2010 Q1-4\n</pre></div>\n</div>\n</dd></dl>"},"threshold":{"signature":"threshold(value, label=None, color=None)","examples":["threshold(123.456, \"omgwtfbbq\", red)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.threshold\">\n<tt class=\"descname\">threshold</tt><big>(</big><em>value</em>, <em>label=None</em>, <em>color=None</em><big>)</big></dt>\n<dd><p>Takes a float F, followed by a label (in double quotes) and a color.\n(See <tt class=\"docutils literal\"><span class=\"pre\">bgcolor</span></tt> in the render_api_ for valid color names &amp; formats.)</p>\n<p>Draws a horizontal line at value F across the graph.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=threshold(123.456, \"omgwtfbbq\", red)\n</pre></div>\n</div>\n</dd></dl>"},"timeFunction":{"signature":"timeFunction(name)","examples":["time(\"The.time.series\")"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.timeFunction\">\n<tt class=\"descname\">timeFunction</tt><big>(</big><em>name</em><big>)</big></dt>\n<dd><p>Short Alias: time()</p>\n<p>Just returns the timestamp for each X value. T</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=time(\"The.time.series\")\n</pre></div>\n</div>\n<p>This would create a series named “The.time.series” that contains in Y the same\nvalue (in seconds) as X.</p>\n</dd></dl>"},"timeShift":{"signature":"timeShift(seriesList, timeShift, resetEnd=True)","examples":["timeShift(Sales.widgets.largeBlue,\"7d\")","timeShift(Sales.widgets.largeBlue,\"-7d\")","timeShift(Sales.widgets.largeBlue,\"+1h\")"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.timeShift\">\n<tt class=\"descname\">timeShift</tt><big>(</big><em>seriesList</em>, <em>timeShift</em>, <em>resetEnd=True</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList, followed by a quoted string with the\nlength of time (See <tt class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">/</span> <span class=\"pre\">until</span></tt> in the render_api_ for examples of time formats).</p>\n<p>Draws the selected metrics shifted in time. If no sign is given, a minus sign ( - ) is\nimplied which will shift the metric back in time. If a plus sign ( + ) is given, the\nmetric will be shifted forward in time.</p>\n<p>Will reset the end date range automatically to the end of the base stat unless\nresetEnd is False. Example case is when you timeshift to last week and have the graph\ndate range set to include a time in the future, will limit this timeshift to pretend\nending at the current time. If resetEnd is False, will instead draw full range including\nfuture time.</p>\n<p>Useful for comparing a metric against itself at a past periods or correcting data\nstored at an offset.</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=timeShift(Sales.widgets.largeBlue,\"7d\")\n&amp;target=timeShift(Sales.widgets.largeBlue,\"-7d\")\n&amp;target=timeShift(Sales.widgets.largeBlue,\"+1h\")\n</pre></div>\n</div>\n</dd></dl>"},"timeStack":{"signature":"timeStack(seriesList, timeShiftUnit, timeShiftStart, timeShiftEnd)","examples":["timeStack(Sales.widgets.largeBlue,\"1d\",0,7)    # create a series for today and each of the previous 7 days"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.timeStack\">\n<tt class=\"descname\">timeStack</tt><big>(</big><em>seriesList</em>, <em>timeShiftUnit</em>, <em>timeShiftStart</em>, <em>timeShiftEnd</em><big>)</big></dt>\n<dd><p>Takes one metric or a wildcard seriesList, followed by a quoted string with the\nlength of time (See <tt class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">/</span> <span class=\"pre\">until</span></tt> in the render_api_ for examples of time formats).\nAlso takes a start multiplier and end multiplier for the length of time</p>\n<p>create a seriesList which is composed the orginal metric series stacked with time shifts\nstarting time shifts from the start multiplier through the end multiplier</p>\n<p>Useful for looking at history, or feeding into seriesAverage or seriesStdDev</p>\n<p>Example:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=timeStack(Sales.widgets.largeBlue,\"1d\",0,7)    # create a series for today and each of the previous 7 days\n</pre></div>\n</div>\n</dd></dl>"},"transformNull":{"signature":"transformNull(seriesList, default=0)","examples":["transformNull(webapp.pages.*.views,-1)"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.transformNull\">\n<tt class=\"descname\">transformNull</tt><big>(</big><em>seriesList</em>, <em>default=0</em><big>)</big></dt>\n<dd><p>Takes a metric or wild card seriesList and an optional value\nto transform Nulls to. Default is 0. This method compliments\ndrawNullAsZero flag in graphical mode but also works in text only\nmode.\nExample:</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=transformNull(webapp.pages.*.views,-1)\n</pre></div>\n</div>\n<p>This would take any page that didn’t have values and supply negative 1 as a default.\nAny other numeric value may be used as well.</p>\n</dd></dl>"},"useSeriesAbove":{"signature":"useSeriesAbove(seriesList, value, search, replace)","examples":["useSeriesAbove(ganglia.metric1.reqs,10,\"reqs\",\"time\")"],"docs":"<dl class=\"function\">\n<dt id=\"graphite.render.functions.useSeriesAbove\">\n<tt class=\"descname\">useSeriesAbove</tt><big>(</big><em>seriesList</em>, <em>value</em>, <em>search</em>, <em>replace</em><big>)</big></dt>\n<dd><p>Compares the maximum of each series against the given <cite>value</cite>. If the series\nmaximum is greater than <cite>value</cite>, the regular expression search and replace is\napplied against the series name to plot a related metric</p>\n<p>e.g. given useSeriesAbove(ganglia.metric1.reqs,10,’reqs’,’time’),\nthe response time metric will be plotted only when the maximum value of the\ncorresponding request/s metric is &gt; 10</p>\n<div class=\"highlight-none\"><div class=\"highlight\"><pre>&amp;target=useSeriesAbove(ganglia.metric1.reqs,10,\"reqs\",\"time\")\n</pre></div>\n</div>\n</dd></dl>"}}};
